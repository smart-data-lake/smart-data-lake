/*
 * Smart Data Lake - Build your data lake the smart way.
 *
 * Copyright Â© 2019-2023 ELCA Informatique SA (<https://www.elca.ch>)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package io.smartdatalake.lab

import io.smartdatalake.config.{ConfigToolbox, InstanceRegistry}
import io.smartdatalake.lab.DataFrameBaseBuilder.DEFAULT_DATAOBJECT_ID
import io.smartdatalake.util.hdfs.PartitionValues
import io.smartdatalake.workflow.ActionPipelineContext
import io.smartdatalake.workflow.action.generic.transformer.OptionsGenericDfsTransformer.OPTION_OUTPUT_DATAOBJECT_ID
import io.smartdatalake.workflow.action.generic.transformer.{GenericDfsTransformerDef, Transformer}
import io.smartdatalake.workflow.action.spark.customlogic.{CustomDfsTransformer, CustomTransformMethodDef, CustomTransformMethodWrapper, NotFoundError, TransformDfsMethod, TransformInfo}
import io.smartdatalake.workflow.action.spark.transformer.ScalaClassSparkDsNTo1Transformer.prepareTolerantKey
import io.smartdatalake.workflow.dataobject.CanCreateSparkDataFrame
import org.apache.spark.sql.{Column, DataFrame, SparkSession}

import scala.collection.mutable

/**
 * An interface for accessing SDLB objects for interactive use (lab, development of transformation)
 *
 * @param session                  Spark session to use
 * @param configuration            One or multiple configuration files or directories containing configuration files, separated by comma.
 * @param dataObjectCatalogFactory A method to create a data object catalog instance to be used by this SmartDataLakeBuilderLab.
 *                                 Note that this is normally an instance from a class generated by LabCatalogGenerator in a second compile phase.
 * @param actionFactory A method to create a action catalog instance to be used by this SmartDataLakeBuilderLab.
 *                                 Note that this is normally an instance from a class generated by LabCatalogGenerator in a second compile phase.
 * @param userClassLoader          when working in notebooks and loading dependencies through the notebook metadata configuration,
 *                                 it might be needed to pass the ClassLoader of the notebook, otherwise SDLB might not be able to load classes referenced in the configuration.
 */
case class SmartDataLakeBuilderLab[D,A](
                                       private val session: SparkSession,
                                       private val configuration: Seq[String],
                                       private val dataObjectCatalogFactory: (InstanceRegistry, ActionPipelineContext) => D,
                                       private val actionCatalogFactory: (InstanceRegistry, ActionPipelineContext) => A,
                                       private val userClassLoader: Option[ClassLoader] = None
                                     ) {
  @transient val (registry, globalConfig) = ConfigToolbox.loadAndParseConfig(configuration, userClassLoader, session.sparkContext.hadoopConfiguration)
  @transient val context: ActionPipelineContext = ConfigToolbox.getDefaultActionPipelineContext(session, registry)
  @transient val dataObjects: D = dataObjectCatalogFactory(registry, context)
  @transient val actions: A = actionCatalogFactory(registry, context)
  @transient private val dataObjectsTolerantKey = registry.getDataObjects.map{d => (prepareTolerantKey(d.id.id), d)}.toMap

  def buildDataFrames: GetDataFrameBuilder = GetDataFrameBuilder()

  case class GetDataFrameBuilder private (
                                           override val partitionValues: Seq[PartitionValues] = Seq(),
                                           override val filters: Map[String,Column] = Map(),
                                           transformers: Seq[TransformDfsMethod with TransformInfo] = Seq(),
                                           options: Map[String,String] = Map()
                                         ) extends DataFrameBaseBuilder[GetDataFrameBuilder] {

    /**
     * Add additional transformer.
     */
    def withTransformer(transformer: CustomDfsTransformer): GetDataFrameBuilder = copy(transformers = transformers :+ transformer)

    /**
     * Add options to be passed to the transformers
     */
    def withOptions(options: Map[String,String]): GetDataFrameBuilder = copy(options = this.options ++ options)

    /**
     * Get DataFrames using selected options.
     */
    def get: Map[String,DataFrame] = {
      require(transformers.nonEmpty, "At least one transformer must be defined to create DataFrames using SmartDataLakeBuilderLab.buildDataFrames")
      val dfs = transformers.foldLeft(Map[String,DataFrame]()) {
        case (dfs, t) => sparkTransform(t, partitionValues, filters, options, dfs)
      }
      println(s"DataFrames built: ${dfs.keys.mkString(", ")}")
      dfs
    }

    override protected def setPartitionValues(partitionValues: Seq[PartitionValues]): GetDataFrameBuilder = copy(partitionValues = partitionValues)
    override protected def setFilters(filters: Map[String, Column]): GetDataFrameBuilder = copy(filters = filters)
  }

  private def sparkTransform(transformer: TransformDfsMethod with TransformInfo, partitionValues: Seq[PartitionValues], filters: Map[String,Column], options: Map[String,String] = Map(), previousDfs: Map[String,DataFrame] = Map()): Map[String,DataFrame] = {

    val inputDataObjectsNameAndType = transformer.getInputDataObjectsNameAndType
      .getOrElse(throw new IllegalArgumentException("Transformer must support named input DataObjects"))

    // get DataFrames
    val previousDfsTolerantKey = previousDfs.map{case (id, df) => (prepareTolerantKey(id), (id, df))}
    var dfs = previousDfs ++ inputDataObjectsNameAndType.map{
      case (name, tpe) =>
        previousDfsTolerantKey.getOrElse(name, {
          val dataObject = dataObjectsTolerantKey.getOrElse(name, throw NotFoundError(s"No DataObject found with name $name"))
          val df = dataObject match {
            case sparkDataObject: CanCreateSparkDataFrame => sparkDataObject.getSparkDataFrame(partitionValues)(context)
            case x => throw new IllegalStateException(s"${x.id} does not support creating Spark DataFrames")
          }
          (dataObject.id.id, df)
        })
    }

    // filter
    dfs = filters.foldLeft(dfs) {
      case (dfs, (column, filterExpr)) =>
        dfs.mapValues(df => if (df.schema.fieldNames.contains(column)) df.filter(filterExpr) else df).toMap
    }

    // transform
    val optionsPrep = mutable.Map(options.toSeq: _*)
    if (transformer.isSingleOutput) optionsPrep += (OPTION_OUTPUT_DATAOBJECT_ID -> DEFAULT_DATAOBJECT_ID)
    transformer.transform(session, optionsPrep.toMap, dfs)
  }
}

object SmartDataLakeBuilderLab {
  /**
   * Writing into DataObjects using SmartDataLakeBuilderLab is disabled by default, as this should be done through data pipelines and not interactively.
   * It can be enabled by setting the following variable to true.
   */
  var enableWritingDataObjects = false
}
