<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Smart Data Lake - Build your data lake the smart way.
  ~
  ~ Copyright Â© 2019-2022 ELCA Informatique SA (<https://www.elca.ch>)
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program. If not, see <http://www.gnu.org/licenses/>.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>sdl-parent</artifactId>
        <groupId>io.smartdatalake</groupId>
        <version>2.7.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>sdl-lang_${scala.minor.version}</artifactId>
    <packaging>jar</packaging>

    <name>sdl-lang</name>

    <dependencies>

        <!-- override scope for spark dependencies to include/exclude them correctly for the fat-jar -->
        <!-- note that the corresponding profile defining spark.deps.scope is inherited from sdl-parent -->
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-core_${scala.minor.version}</artifactId>
            <version>${spark.version}</version>
            <scope>${spark.deps.scope}</scope>
        </dependency>
        <!-- all modules needed to create configuration schema, but not as transitive dependencies (-> optional=true) -->
        <dependency>
            <groupId>io.smartdatalake</groupId>
            <artifactId>sdl-core_${scala.minor.version}</artifactId>
            <version>${project.parent.version}</version>
            <exclusions>
                <!-- Annotation InterfaceAudience causes "illegal cyclic reference involving class InterfaceAudience" when searching for annotations with reflection -->
                <exclusion>
                    <groupId>org.apache.hadoop</groupId>
                    <artifactId>hadoop-annotations</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>io.smartdatalake</groupId>
            <artifactId>sdl-azure_${scala.minor.version}</artifactId>
            <version>${project.parent.version}</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>io.smartdatalake</groupId>
            <artifactId>sdl-deltalake_${scala.minor.version}</artifactId>
            <version>${project.parent.version}</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>io.smartdatalake</groupId>
            <artifactId>sdl-iceberg_${scala.minor.version}</artifactId>
            <version>${project.parent.version}</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>io.smartdatalake</groupId>
            <artifactId>sdl-jms_${scala.minor.version}</artifactId>
            <version>${project.parent.version}</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>io.smartdatalake</groupId>
            <artifactId>sdl-kafka_${scala.minor.version}</artifactId>
            <version>${project.parent.version}</version>
            <optional>true</optional>
            <exclusions>
                <!-- this is to exclude hadoop-annations, which is shaded into hadoop-client-api -->
                <!-- Annotation InterfaceAudience causes "illegal cyclic reference involving class InterfaceAudience" when searching for annotations with reflection -->
                <exclusion>
                    <groupId>org.apache.hadoop</groupId>
                    <artifactId>hadoop-client-runtime</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>io.smartdatalake</groupId>
            <artifactId>sdl-snowflake_${scala.minor.version}</artifactId>
            <version>${project.parent.version}</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>io.smartdatalake</groupId>
            <artifactId>sdl-splunk_${scala.minor.version}</artifactId>
            <version>${project.parent.version}</version>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>com.github.scopt</groupId>
            <artifactId>scopt_${scala.minor.version}</artifactId>
            <version>${scopt.version}</version>
        </dependency>

        <dependency>
            <groupId>org.scala-lang.modules</groupId>
            <artifactId>scala-collection-compat_${scala.minor.version}</artifactId>
        </dependency>

        <dependency>
            <groupId>com.github.andyglow</groupId>
            <artifactId>scaladoc-ast_${scala.minor.version}</artifactId>
            <version>0.0.14</version>
        </dependency>
        <dependency>
            <groupId>com.github.andyglow</groupId>
            <artifactId>scaladoc-parser_${scala.minor.version}</artifactId>
            <version>0.0.14</version>
        </dependency>

        <!-- TEST dependencies -->
        <dependency>
            <groupId>org.scalatest</groupId>
            <artifactId>scalatest_${scala.minor.version}</artifactId>
            <scope>test</scope>
        </dependency>
        <!--		 sdl-core test utils-->
        <dependency>
            <groupId>io.smartdatalake</groupId>
            <artifactId>sdl-core_${scala.minor.version}</artifactId>
            <version>${project.parent.version}</version>
            <classifier>test-jar</classifier>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.sshd</groupId>
            <artifactId>sshd-core</artifactId>
            <version>${sshd.test.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.tomakehurst</groupId>
            <artifactId>wiremock-standalone</artifactId>
            <version>2.25.1</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>

        <sourceDirectory>src/main/scala</sourceDirectory>
        <testSourceDirectory>src/test/scala</testSourceDirectory>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
            <resource>
                <targetPath>META-INF</targetPath>
                <directory>${basedir}</directory>
                <filtering>false</filtering>
                <includes>
                    <include>COPYING</include> <!-- the file containing the license text -->
                </includes>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
            </testResource>
        </testResources>

        <plugins>
            <!-- Compiles Scala sources. -->
            <plugin>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>scala-maven-plugin</artifactId>
            </plugin>

            <!-- rewrite pom for compiling with different scala version profiles -->
            <plugin>
                <groupId>org.spurint.maven.plugins</groupId>
                <artifactId>scala-cross-maven-plugin</artifactId>
            </plugin>

            <!-- Copies files in resources folders to target folder. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
            </plugin>

            <!-- Checks whether source files have the specified license header. -->
            <plugin>
                <groupId>com.mycila</groupId>
                <artifactId>license-maven-plugin</artifactId>
            </plugin>

            <!-- Creates the jar without dependencies -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
            </plugin>

            <!-- Creates a JAR file with the source files of the project. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
            </plugin>

            <!-- Executes units tests with scalatest  -->
            <plugin>
                <groupId>org.scalatest</groupId>
                <artifactId>scalatest-maven-plugin</artifactId>
            </plugin>

            <!-- Checks for declared but unused and undeclared but used dependencies in the verify stage -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
            </plugin>

            <!-- check for dependency version conflicts -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
            </plugin>

            <!-- generate json schema as resource -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>generate-json-schema</id>
                        <phase>prepare-package</phase>
                        <goals><goal>java</goal></goals>
                        <configuration>
                            <mainClass>io.smartdatalake.meta.jsonschema.JsonSchemaExporter</mainClass>
                            <arguments>
                                <argument>--filename</argument><argument>${project.build.outputDirectory}/sdl-schema.json</argument>
                                <argument>--version</argument><argument>${project.parent.version}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
