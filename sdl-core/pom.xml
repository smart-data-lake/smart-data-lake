<!--
  ~ Smart Data Lake - Build your data lake the smart way.
  ~
  ~ Copyright Â© 2019-2020 ELCA Informatique SA (<https://www.elca.ch>)
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program. If not, see <http://www.gnu.org/licenses/>.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>io.smartdatalake</groupId>
		<artifactId>sdl-parent</artifactId>
		<version>1.3.2-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath>
	</parent>

	<artifactId>sdl-core_${scala.minor.version}</artifactId>
	<packaging>jar</packaging>

	<name>sdl-core</name>

	<dependencyManagement>
		<dependencies>
			<dependency>
                <groupId>com.healthmarketscience.jackcess</groupId>
                <artifactId>jackcess</artifactId>
				<scope>compile</scope>
            </dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>com.databricks</groupId>
			<artifactId>dbutils-api_2.11</artifactId>
			<version>0.0.4</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<dependency>
			<groupId>com.github.scopt</groupId>
			<artifactId>scopt_${scala.minor.version}</artifactId>
			<version>${scopt.version}</version>
		</dependency>

		<!-- hadoop-common is an used undeclared dependency, but if we would explicitly list it we would need to duplicate the exclusions as in spark-parent.
		     If we don't declare it, we get the exclusion over import of spark-parent dependencyManagement, which is more valuable -->
		<!--dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-common</artifactId>
			<version>${hadoop.version}</version>
		</dependency-->

		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-core_${scala.minor.version}</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-sql_${scala.minor.version}</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-hive_${scala.minor.version}</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-catalyst_${scala.minor.version}</artifactId>
		</dependency>

		<dependency>
			<groupId>io.smartdatalake</groupId>
			<artifactId>spark-extensions_${scala.minor.version}</artifactId>
			<version>${spark-extensions.version}</version>
		</dependency>

		<dependency>
			<groupId>com.databricks</groupId>
			<artifactId>spark-xml_${scala.minor.version}</artifactId>
			<version>${databricks.spark-xml.version}</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-avro_${scala.minor.version}</artifactId>
			<version>${spark.version}</version>
			<scope>${spark.deps.scope}</scope>
		</dependency>

		<!-- this needs to have compile scope, if it's runtime it doesnt compile anymore -->
		<!-- this is an unused declared dependency, but it's needed to override scope -->
		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-tags_${scala.minor.version}</artifactId>
			<version>${spark.version}</version>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>${commons-io.version}</version>
		</dependency>

		<dependency>
			<groupId>com.crealytics</groupId>
			<artifactId>spark-excel_${scala.minor.version}</artifactId>
			<version>${spark.excel.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
		</dependency>

		<dependency>
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<version>${hsqldb.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>net.sf.ucanaccess</groupId>
			<artifactId>ucanaccess</artifactId>
			<version>${ucanaccess.version}</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>com.hierynomus</groupId>
			<artifactId>sshj</artifactId>
			<version>${sshj.version}</version>
		</dependency>
		<dependency>
			<groupId>net.i2p.crypto</groupId>
			<artifactId>eddsa</artifactId>
			<version>0.3.0</version>
		</dependency>

		<dependency>
			<groupId>org.scala-lang</groupId>
			<artifactId>scala-library</artifactId>
		</dependency>
		<dependency>
			<groupId>org.scala-lang</groupId>
			<artifactId>scala-reflect</artifactId>
		</dependency>
		<dependency>
			<groupId>org.scala-lang</groupId>
			<artifactId>scala-compiler</artifactId>
		</dependency>
		<dependency>
			<groupId>org.scala-lang.modules</groupId>
			<artifactId>scala-xml_${scala.minor.version}</artifactId>
		</dependency>

		<dependency>
			<groupId>com.typesafe</groupId>
			<artifactId>config</artifactId>
		</dependency>
		<dependency>
			<groupId>com.github.kxbmap</groupId>
			<artifactId>configs_${scala.minor.version}</artifactId>
		</dependency>

		<dependency>
			<groupId>org.scalaj</groupId>
			<artifactId>scalaj-http_${scala.minor.version}</artifactId>
			<version>2.3.0</version>
		</dependency>

		<!-- Start Keycloak dependencies -->
		<dependency>
			<groupId>org.keycloak</groupId>
			<artifactId>keycloak-core</artifactId>
			<version>${keycloak.version}</version>
		</dependency>
		<dependency>
			<groupId>org.keycloak</groupId>
			<artifactId>keycloak-admin-client</artifactId>
			<version>${keycloak.version}</version>
		</dependency>

		<!--  only used for keycloak admin api -->
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-client</artifactId>
			<version>4.5.7.Final</version>
			<scope>runtime</scope>
		</dependency>
		<!-- End Keycloak dependencies -->

		<dependency>
			<groupId>io.monix</groupId>
			<artifactId>monix-eval_${scala.minor.version}</artifactId>
			<version>${monix.version}</version>
		</dependency>
		<dependency>
			<groupId>io.monix</groupId>
			<artifactId>monix-execution_${scala.minor.version}</artifactId>
			<version>${monix.version}</version>
		</dependency>

		<dependency>
			<groupId>com.github.mutcianm</groupId>
			<artifactId>ascii-graphs_${scala.minor.version}</artifactId>
			<version>0.0.6</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-pool2</artifactId>
			<version>2.8.0</version>
		</dependency>

		<dependency>
			<groupId>org.apache.tika</groupId>
			<artifactId>tika-core</artifactId>
			<version>1.24.1</version>
			<scope>compile</scope>
		</dependency>

		<!-- TEST dependencies -->
		<dependency>
			<groupId>org.scalatest</groupId>
			<artifactId>scalatest_${scala.minor.version}</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.scalactic</groupId>
			<artifactId>scalactic_${scala.minor.version}</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.scalacheck</groupId>
			<artifactId>scalacheck_${scala.minor.version}</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- Log4j is used in some unit tests to disable some exception logging, but also indirectly from SmartDataLakeLogger. Thats why we should not put scope=test-->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<!--scope>test</scope-->
		</dependency>

		<dependency>
			<groupId>org.apache.sshd</groupId>
			<artifactId>sshd-sftp</artifactId>
			<version>${sshd.test.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.sshd</groupId>
			<artifactId>sshd-common</artifactId>
			<version>${sshd.test.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.sshd</groupId>
			<artifactId>sshd-core</artifactId>
			<version>${sshd.test.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.github.tomakehurst</groupId>
			<artifactId>wiremock-standalone</artifactId>
			<version>2.25.1</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>io.circe</groupId>
			<artifactId>circe-yaml_${scala.minor.version}</artifactId>
			<version>0.10.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.circe</groupId>
			<artifactId>circe-generic_${scala.minor.version}</artifactId>
			<version>0.12.0-M3</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.reflections</groupId>
			<artifactId>reflections</artifactId>
			<version>0.9.12</version>
		</dependency>

	</dependencies>

	<build>

		<sourceDirectory>src/main/scala</sourceDirectory>
		<testSourceDirectory>src/test/scala</testSourceDirectory>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
			<resource>
				<targetPath>META-INF</targetPath>
				<directory>${basedir}</directory>
				<filtering>false</filtering>
				<includes>
					<include>COPYING</include> <!-- the file containing the license text -->
				</includes>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
			</testResource>
		</testResources>

		<plugins>
			<!-- Compiles Scala sources. -->
			<plugin>
				<groupId>net.alchim31.maven</groupId>
				<artifactId>scala-maven-plugin</artifactId>
			</plugin>

			<!-- rewrite pom for compiling with different scala version profiles -->
			<plugin>
				<groupId>org.spurint.maven.plugins</groupId>
				<artifactId>scala-cross-maven-plugin</artifactId>
			</plugin>

			<!-- Copies files in resources folders to target folder. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
			</plugin>

			<!-- Checks whether source files have the specified license header. -->
			<plugin>
				<groupId>com.mycila</groupId>
				<artifactId>license-maven-plugin</artifactId>
			</plugin>

			<!-- Creates the jar without dependencies -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<!-- create an additional test-jar file to reuse test utils in other modules -->
				<executions>
					<execution>
						<id>test-jar</id>
						<phase>package</phase>
						<goals>
							<goal>test-jar</goal>
						</goals>
						<configuration>
							<classifier>test-jar</classifier>
							<includes>
								<include>**/testutils/**</include>
							</includes>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Creates a JAR file with the source files of the project. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
			</plugin>

			<!-- Executes units tests with scalatest  -->
			<plugin>
				<groupId>org.scalatest</groupId>
				<artifactId>scalatest-maven-plugin</artifactId>
			</plugin>

			<!-- Checks for declared but unused and undeclared but used dependencies in the verify stage -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
			</plugin>

			<!-- check for dependency version conflicts -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
			</plugin>

		</plugins>
	</build>
</project>
