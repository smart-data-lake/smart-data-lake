//In this Config, we imagine a scenario where have some 2 environnements: an on premise environnement and a cloud environment.
//Our goal is to copy some data from the on premise environment to the cloud environment.
//We have a Remote Agent called agent-dummy that lives in the on premise environment.
//It is the only one who is able to access the data of the DataObject remoteFile.
//agent-dummy also has a private secured connection that allows it to upload a file to the cloud.
//The Main Instance lives in the cloud and it's the Instance of SDLB that parses this configuration file.
//It will execute the action remote-to-cloud on agent-dummy.
//agent-dummy will copy the data from the DataObject remote-file to the DataObject cloud-file1.
//Once that is done, the Main Instance will get as a response the schema of the cloud-file1 from agent-dummy.
//However, it will download the data itself using it's own connection for continuing the processing in the cloud
//with action cloud-to-cloud.
//Note: In a realistic scenario you would not have FileConnections, but most likely JDBCConnections.
//Moreover, agent-dummy would most likely not use the same connection as the main instance for DataObject cloud-file1.

agents {
  agent-dummy {
    type = JettyAgent
    url = "ws://localhost:4441/ws/"
    connections {
      remoteFile {
        id = remoteFile
        type = HadoopFileConnection
        pathPrefix = "target/jetty_agent_dummy_connection"
      }
    }
  }
}
// In this config, the names are described from a cloud perspective: SDLB Main Instance lives in the cloud
// and SDLB remote Agent lives "on premise", which is called remote in this config.

connections {
  cloudFile {
    type = HadoopFileConnection
    pathPrefix = "target/jetty_dummy_cloud_connection"
  }
}

actions {
  //Copies the Remote File to to the Cloud using the Private Connection of the Remote Agent.
  //We im
  remote-to-cloud {
    type = CopyAction
    agentId = agent-dummy
    inputId = remote-file
    outputId = cloud-file1
    metadata.feed = test
  }
  cloud-to-cloud {
    type = CopyAction
    inputId = cloud-file1
    outputId = cloud-file2
    metadata.feed = test
  }
}

dataObjects {
  remote-file {
    type = CsvFileDataObject
    path = "remote-file"
    connectionId = remoteFile
  }
  cloud-file1 {
    type = CsvFileDataObject
    path = "cloud-file1"
    connectionId = cloudFile
  }
  cloud-file2 {
    type = CsvFileDataObject
    path = "cloud-file2"
    connectionId = cloudFile

  }
}