<!--
  ~ Smart Data Lake - Build your data lake the smart way.
  ~
  ~ Copyright Â© 2019-2020 ELCA Informatique SA (<https://www.elca.ch>)
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program. If not, see <http://www.gnu.org/licenses/>.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>io.smartdatalake</groupId>
		<artifactId>sdl-parent</artifactId>
		<version>2.7.2-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath>
	</parent>

	<artifactId>sdl-kafka_${scala.minor.version}</artifactId>
	<packaging>jar</packaging>

	<name>sdl-kafka</name>

	<profiles>
		<profile>
			<id>fat-jar</id>
			<!-- maven appends new entries and overwrites existing entries from the same profile defined in sdl-parent -->
			<properties>
				<!-- do not include sdl-core into fat-jar for this module, as sdl-core is normally put into classpath separately -->
				<sdl-core.scope>provided</sdl-core.scope>
			</properties>
		</profile>
	</profiles>

	<properties>
		<sdl-core.scope>compile</sdl-core.scope>
		<confluent.version>7.5.1</confluent.version>
	</properties>

	<dependencyManagement>
		<dependencies>
			<!-- kafka-clients is referenced from multiple dependencies below with different versions. Stick to the version spark originally defines. -->
			<dependency>
				<groupId>org.apache.kafka</groupId>
				<artifactId>kafka-clients</artifactId>
				<version>${kafka.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>io.smartdatalake</groupId>
			<artifactId>sdl-core_${scala.minor.version}</artifactId>
			<version>${project.parent.version}</version>
			<scope>${sdl-core.scope}</scope>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-sql_${scala.minor.version}</artifactId>
			<scope>${sdl-core.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-catalyst_${scala.minor.version}</artifactId>
			<scope>${sdl-core.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-sql-kafka-0-10_${scala.minor.version}</artifactId>
			<version>${spark.version}</version>
			<scope>runtime</scope>
			<exclusions>
				<!-- hadoop-client is referenced directly by sdl-core -->
				<exclusion>
					<groupId>org.apache.hadoop</groupId>
					<artifactId>hadoop-client-runtime</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.hadoop</groupId>
					<artifactId>hadoop-client-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-clients</artifactId>
		</dependency>
		<dependency>
			<groupId>io.confluent</groupId>
			<artifactId>kafka-json-serializer</artifactId>
			<version>${confluent.version}</version>
		</dependency>
		<!-- this is for reading from kafka using confluent schema registry with Spark -->
		<!-- this is an unused declared dependency but needed in tests and at runtime -->
		<dependency>
			<groupId>io.confluent</groupId>
			<artifactId>kafka-schema-registry-client</artifactId>
			<version>${confluent.version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.apache.kafka</groupId>
					<artifactId>kafka-clients</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.yaml</groupId>
					<artifactId>snakeyaml</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.apache.zookeeper</groupId>
			<artifactId>zookeeper</artifactId>
		</dependency>

		<dependency>
			<groupId>io.smartdatalake</groupId>
			<artifactId>spark-extensions_${scala.minor.version}</artifactId>
			<version>${spark-extensions.version}</version>
			<scope>${sdl-core.scope}</scope>
		</dependency>

		<dependency>
			<groupId>com.typesafe</groupId>
			<artifactId>config</artifactId>
			<scope>${sdl-core.scope}</scope>
		</dependency>
		<dependency>
			<groupId>com.github.kxbmap</groupId>
			<artifactId>configs_${scala.minor.version}</artifactId>
			<scope>${sdl-core.scope}</scope>
		</dependency>

		<dependency>
			<groupId>org.scala-lang</groupId>
			<artifactId>scala-library</artifactId>
			<scope>${sdl-core.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.scala-lang</groupId>
			<artifactId>scala-reflect</artifactId>
			<scope>${sdl-core.scope}</scope>
		</dependency>

		<!-- this is needed for running kafka/scala_2.12 on java8, unit tests fail otherwise -->
		<dependency>
			<groupId>org.scala-lang.modules</groupId>
			<artifactId>scala-java8-compat_${scala.minor.version}</artifactId>
			<version>0.9.1</version>
		</dependency>

		<!-- TEST dependencies -->
		<dependency>
			<groupId>org.scalatest</groupId>
			<artifactId>scalatest_${scala.minor.version}</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.scalactic</groupId>
			<artifactId>scalactic_${scala.minor.version}</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.scalacheck</groupId>
			<artifactId>scalacheck_${scala.minor.version}</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- sdl-core test utils -->
		<dependency>
			<groupId>io.smartdatalake</groupId>
			<artifactId>sdl-core_${scala.minor.version}</artifactId>
			<version>${project.parent.version}</version>
			<classifier>test-jar</classifier>
			<type>test-jar</type>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.sshd</groupId>
			<artifactId>sshd-sftp</artifactId>
			<version>${sshd.test.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.sshd</groupId>
			<artifactId>sshd-common</artifactId>
			<version>${sshd.test.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.sshd</groupId>
			<artifactId>sshd-core</artifactId>
			<version>${sshd.test.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.github.tomakehurst</groupId>
			<artifactId>wiremock-standalone</artifactId>
			<version>2.25.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka_${scala.minor.version}</artifactId>
			<version>${kafka.version}</version>
			<exclusions>
				<exclusion>
					<groupId>commons-cli</groupId>
					<artifactId>commons-cli</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.scala-lang.modules</groupId>
					<artifactId>scala-java8-compat_${scala.minor.version}</artifactId>
				</exclusion>
			</exclusions>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>io.github.embeddedkafka</groupId>
			<artifactId>embedded-kafka_${scala.minor.version}</artifactId>
			<version>${kafka.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.github.embeddedkafka</groupId>
			<artifactId>embedded-kafka-schema-registry_${scala.minor.version}</artifactId>
			<version>${confluent.version}</version>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</exclusion>
				<exclusion>
					<groupId>io.confluent</groupId>
					<artifactId>confluent-log4j</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

	<build>
		<sourceDirectory>src/main/scala</sourceDirectory>
		<testSourceDirectory>src/test/java</testSourceDirectory>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
			<resource>
				<targetPath>META-INF</targetPath>
				<directory>${basedir}</directory>
				<filtering>false</filtering>
				<includes>
					<include>COPYING</include> <!-- the file containing the license text -->
				</includes>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
			</testResource>
		</testResources>

		<plugins>

			<!-- add scala sources, if we have also java sources using sourceDirectory / testSourceDirectory tag -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
			</plugin>

			<!-- Compiles Scala sources. -->
			<plugin>
				<groupId>net.alchim31.maven</groupId>
				<artifactId>scala-maven-plugin</artifactId>
			</plugin>

			<!-- rewrite pom for compiling with different scala version profiles -->
			<plugin>
				<groupId>org.spurint.maven.plugins</groupId>
				<artifactId>scala-cross-maven-plugin</artifactId>
			</plugin>

			<!-- Copies files in resources folders to target folder. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
			</plugin>

			<!-- Checks whether source files have the specified license header. -->
			<plugin>
				<groupId>com.mycila</groupId>
				<artifactId>license-maven-plugin</artifactId>
			</plugin>

			<!-- Creates the jar without dependencies -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
			</plugin>

			<!-- Creates a JAR file with the source files of the project. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
			</plugin>

			<!-- Executes units tests with scalatest  -->
			<plugin>
				<groupId>org.scalatest</groupId>
				<artifactId>scalatest-maven-plugin</artifactId>
			</plugin>

			<!-- Checks for declared but unused and undeclared but used dependencies in the verify stage -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
			</plugin>

			<!-- check for dependency version conflicts -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
</project>
