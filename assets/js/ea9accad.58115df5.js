"use strict";(self.webpackChunksmart_data_lake=self.webpackChunksmart_data_lake||[]).push([[1559],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(a),m=i,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||r;return a?n.createElement(f,o(o({ref:t},p),{},{components:a})):n.createElement(f,o({ref:t},p))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},4265:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var n=a(7462),i=(a(7294),a(3905));const r={id:"dataQuality",title:"Data Quality"},o=void 0,s={unversionedId:"reference/dataQuality",id:"reference/dataQuality",title:"Data Quality",description:"Data quality is an important topic in data governance. To monitoring and improvement data quality, building data pipelines with implementing data quality measures is an important measure.",source:"@site/docs/reference/dataQuality.md",sourceDirName:"reference",slug:"/reference/dataQuality",permalink:"/docs/reference/dataQuality",draft:!1,editUrl:"https://github.com/smart-data-lake/smart-data-lake/tree/documentation/docs/reference/dataQuality.md",tags:[],version:"current",frontMatter:{id:"dataQuality",title:"Data Quality"},sidebar:"docs",previous:{title:"Schema",permalink:"/docs/reference/schema"},next:{title:"Execution Phases",permalink:"/docs/reference/executionPhases"}},l={},c=[{value:"Metrics",id:"metrics",level:2},{value:"Constraints",id:"constraints",level:2},{value:"Expectations",id:"expectations",level:2}],p={toc:c};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Data quality is an important topic in data governance. To monitoring and improvement data quality, building data pipelines with implementing data quality measures is an important measure."),(0,i.kt)("p",null,"SDLB provides the following features to improve data quality:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Runtime ",(0,i.kt)("strong",{parentName:"li"},"metrics")," to monitor data pipeline output and track it over time"),(0,i.kt)("li",{parentName:"ul"},"Row-level ",(0,i.kt)("strong",{parentName:"li"},"constraints")," to stop before writing wrong data to an output"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Expectations")," on dataset level to stop or warn on unplausible data")),(0,i.kt)("h2",{id:"metrics"},"Metrics"),(0,i.kt)("p",null,"Every SDLB job collects metrics for each Action and output-DataObject. They are logged with the following log statements:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"2020-07-21 11:36:34 INFO  CopyAction:105 - (Action~a) finished writing to DataObject~tgt1: job_duration=PT0.906S records_written=1 bytes_written=1142 num_tasks=1 stage=save")),(0,i.kt)("p",null,"Metrics are also stored in the state file, and if you want to sync them to monitoring system in real-time, the StateListener can be implemented. It gets notified about action new events and metrics as soon as they are available. To configure state listeners set config attribute ",(0,i.kt)("inlineCode",{parentName:"p"},"global.stateListeners = [{className = ...}]"),"."),(0,i.kt)("h2",{id:"constraints"},"Constraints"),(0,i.kt)("p",null,"Constraints can be defined on DataObjects to validate data on row-level. They work similar as database constraints and are validated when by an Action when writing data into a DataObject. If a constraints validation fails, an Exception is thrown and the Action stops. No further data is written to the DataObject, and if the DataObject implements transactional write (Hive, DeltaLake, Jdbc, ...), no data at all is stored in the output DataObject."),(0,i.kt)("p",null,"To define a constraint an arbitrary SQL expression is evaluated for each row, if it returns false the constraint validation fails. To return a meaningful error message you should configure a useful name and the columns that should be included in the text. See the following example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'dataObjects {\n  testDataObject {\n    ...\n    constraints [{\n      name = A shold be smaller than B\n      description = "If A is bigger than B we have a problem because of ..."\n      expression = "a < b"\n      errorMsgCols = [id, a, b]\n    }]\n}\n')),(0,i.kt)("h2",{id:"expectations"},"Expectations"),(0,i.kt)("p",null,"Expectations can be defined on DataObjects to monitor and validate a dataset after it has been written to the DataObject. An expectation collects a custom metric and compares its result against a given expectation condition. If the condition fails a warning can be logged or an error created which stops further processing. "),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"type = SQLExpectation"),", a simple aggregation SQL expression is evaluated over the dataset. Further, an arbitrary SQL expression can be configured as expectation condition, which is compared against the metric value. If no expectation condition is given, the custom metric value is just logged in the ",(0,i.kt)("inlineCode",{parentName:"p"},"finished writing to DataObject~xyz:...")," log message, see example in ",(0,i.kt)("a",{parentName:"p",href:"#metrics"},"Metrics")," section."),(0,i.kt)("p",null,"SDLB supports other expectation types, see ",(0,i.kt)("a",{parentName:"p",href:"http://smartdatalake.ch/json-schema-viewer/index.html"},"Schema Viewer")," for a list."),(0,i.kt)("p",null,"By default, the expectation is evaluated against the currently processed dataset (scope=Job), which may consist of multiple partition values. Using the option ",(0,i.kt)("inlineCode",{parentName:"p"},"scope=JobPartition"),", the scope can be changed to evalute against ",(0,i.kt)("em",{parentName:"p"},"each")," partition value. The option ",(0,i.kt)("inlineCode",{parentName:"p"},"scope=All")," would take all data in the output DataObject into account. Note that expectations with scope!=Job need reading the data from the output again after it has been written, while expectations with scope=Job can be calculated on the fly when using Spark as execution engine."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'dataObjects {\n  testDataObject {\n    ...\n    expectations = [{\n      type = SQLExpectation\n      name = NoDataPct\n      description = "percentage of records having no data should be less than 0.1"\n      aggExpression = "count(data) / count(*)"\n      expectation = "< 0.1"\n    }\n}\n')))}u.isMDXComponent=!0}}]);