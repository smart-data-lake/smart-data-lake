"use strict";(self.webpackChunksmart_data_lake=self.webpackChunksmart_data_lake||[]).push([[8245],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(a),u=r,f=p["".concat(l,".").concat(u)]||p[u]||m[u]||o;return a?n.createElement(f,i(i({ref:t},d),{},{components:a})):n.createElement(f,i({ref:t},d))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},2057:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const o={id:"commandLine",title:"Command Line"},i="Launch Java application using Spark-Submit",s={unversionedId:"reference/commandLine",id:"reference/commandLine",title:"Command Line",description:"SmartDataLakeBuilder is a java application.",source:"@site/docs/reference/commandLine.md",sourceDirName:"reference",slug:"/reference/commandLine",permalink:"/docs/reference/commandLine",draft:!1,editUrl:"https://github.com/smart-data-lake/smart-data-lake/tree/documentation/docs/reference/commandLine.md",tags:[],version:"current",frontMatter:{id:"commandLine",title:"Command Line"},sidebar:"docs",previous:{title:"Build SDL",permalink:"/docs/reference/build"},next:{title:"Data Objects",permalink:"/docs/reference/dataObjects"}},l={},c=[{value:"Pods with Podman",id:"pods-with-podman",level:2}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},p=d("Tabs"),m=d("TabItem"),u={toc:c};function f(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"launch-java-application-using-spark-submit"},"Launch Java application using Spark-Submit"),(0,r.kt)("p",null,"SmartDataLakeBuilder is a java application.\nTo run on a cluster with spark-submit, use ",(0,r.kt)("strong",{parentName:"p"},"DefaultSmartDataLakeBuilder")," application.\nIt can be started with the following command line options (for details, see ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/deployYarn"},"YARN"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"spark-submit --master yarn --deploy-mode client --class io.smartdatalake.app.DefaultSmartDataLakeBuilder target/smartdatalake_2.11-1.0.3-jar-with-dependencies.jar [arguments]\n")),(0,r.kt)("p",null,"and takes the following arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Usage: DefaultSmartDataLakeBuilder [options]\n  -f, --feed-sel &ltoperation?&gt&ltprefix:?&gt&ltregex&gt[,&ltoperation?&gt&ltprefix:?&gt&ltregex&gt...]\n    Select actions to execute by one or multiple expressions separated by comma (,). Results from multiple expressions are combined from left to right.\n    Operations:\n    - pipe symbol (|): the two sets are combined by union operation (default)\n    - ampersand symbol (&): the two sets are combined by intersection operation\n    - minus symbol (-): the second set is subtracted from the first set\n    Prefixes:\n    - 'feeds': select actions where metadata.feed is matched by regex pattern (default)\n    - 'names': select actions where metadata.name is matched by regex pattern\n    - 'ids': select actions where id is matched by regex pattern\n    - 'layers': select actions where metadata.layer of all output DataObjects is matched by regex pattern\n    - 'startFromActionIds': select actions which with id is matched by regex pattern and any dependent action (=successors)\n    - 'endWithActionIds': select actions which with id is matched by regex pattern and their predecessors\n    - 'startFromDataObjectIds': select actions which have an input DataObject with id is matched by regex pattern and any dependent action (=successors)\n    - 'endWithDataObjectIds': select actions which have an output DataObject with id is matched by regex pattern and their predecessors\n    All matching is done case-insensitive.\n    Example: to filter action 'A' and its successors but only in layer L1 and L2, use the following pattern: \"startFromActionIds:a,&layers:(l1|l2)\"\n  -n, --name &ltvalue&gt       Optional name of the application. If not specified feed-sel is used.\n  -c, --config &ltfile1&gt[,&ltfile2&gt...]\n    One or multiple configuration files or directories containing configuration files, separated by comma. Entries must be valid Hadoop URIs or a special URI with scheme \"cp\" which is treated as classpath entry.\n  --partition-values &ltpartitionColName&gt=&ltpartitionValue&gt[,&ltpartitionValue&gt,...]\n    Partition values to process for one single partition column.\n  --multi-partition-values &ltpartitionColName1&gt=&ltpartitionValue&gt,&ltpartitionColName2&gt=&ltpartitionValue&gt[;(&ltpartitionColName1&gt=&ltpartitionValue&gt,&ltpartitionColName2&gt=&ltpartitionValue&gt;...]\n    Partition values to process for multiple partitoin columns.\n  -s, --streaming          Enable streaming mode for continuous processing.\n  --parallelism &ltint&gt      Parallelism for DAG run.\n  --state-path &ltpath&gt      Path to save run state files. Must be set to enable recovery in case of failures.\n  --override-jars &ltjar1&gt[,&ltjar2&gt...]\n    Comma separated list of jar filenames for child-first class loader. The jars must be present in classpath.\n  --test &ltconfig|dry-run&gt  Run in test mode: config -&gt validate configuration, dry-run -&gt execute prepare- and init-phase only to check environment and spark lineage\n  --help                   Display the help text.\n  --version                Display version information.\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"DefaultSmartDataLakeBuilder")," class should be fine in most situations.\nThere are two additional, adapted application versions you can use:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"LocalSmartDataLakeBuilder"),": default for Spark master is ",(0,r.kt)("inlineCode",{parentName:"li"},"local[*]")," in this case, and it has additional properties to configure Kerberos authentication.\nUse can use this application to run in a local environment (e.g. IntelliJ) without cluster deployment."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"DatabricksSmartDataLakeBuilder"),": see ",(0,r.kt)("a",{parentName:"li",href:"/docs/reference/deploy-microsoft-azure"},"Microsoft Azure"),", special class when running a Databricks Cluster.")),(0,r.kt)("h1",{id:"launching-sdl-container"},"Launching SDL container"),(0,r.kt)("p",null,"Depending on the container definition, especially the entrypoint the arguments may vary. Furthermore, we distinguish starting the container using ",(0,r.kt)("em",{parentName:"p"},"docker")," or ",(0,r.kt)("em",{parentName:"p"},"podman"),". "),(0,r.kt)("p",null,"In general a container launch would look like:"),(0,r.kt)(p,{groupId:"docker-podman-switch",defaultValue:"docker",values:[{label:"Docker",value:"docker"},{label:"Podman",value:"podman"}],mdxType:"Tabs"},(0,r.kt)(m,{value:"docker",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"docker run [docker-args] sdl-spark --config [config-file] --feed-sel [feed] [further-SDL-args]\n"))),(0,r.kt)(m,{value:"podman",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"podman run [docker-args] sdl-spark --config [config-file] --feed-sel [feed] [further-SDL-args]\n")))),(0,r.kt)("p",null,"These could also include mounted directories for configurations, additional Scala Classes, data directories, etc."),(0,r.kt)(p,{groupId:"docker-podman-switch",defaultValue:"docker",values:[{label:"Docker",value:"docker"},{label:"Podman",value:"podman"}],mdxType:"Tabs"},(0,r.kt)(m,{value:"docker",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"docker run --rm -v ${PWD}/data:/mnt/data -v ${PWD}/target:/mnt/lib -v ${PWD}/config:/mnt/config sdl-spark:latest --config /mnt/config --feed-sel download\n"))),(0,r.kt)(m,{value:"podman",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"podman run --rm -v ${PWD}/data:/mnt/data -v ${PWD}/target:/mnt/lib -v ${PWD}/config:/mnt/config sdl-spark:latest --config /mnt/config --feed-sel download\n")))),(0,r.kt)("h2",{id:"pods-with-podman"},"Pods with Podman"),(0,r.kt)("p",null,"When interacting between multiple containers, e.g. SDL container and a metastore container, pods are utilized to manage the container and especially the network. A set of containers is launched using podman-compose and a ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml"),". Podman-compose < 1.0.0 creates the pods automatically. This seems to be broken in later versions. That is why we suggest to install podman-compose 0.1.11."),(0,r.kt)("p",null,"Assuming an existing pod ",(0,r.kt)("inlineCode",{parentName:"p"},"mypod")," is running, another container can be started within this pod using the additional podman arguments ",(0,r.kt)("inlineCode",{parentName:"p"},"--pod mypod --hostname myhost --add-host myhost:127.0.0.1"),".\nThe hostname specification fixes an issue in resolving the own localhost."))}f.isMDXComponent=!0}}]);