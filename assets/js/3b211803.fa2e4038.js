"use strict";(self.webpackChunksmart_data_lake=self.webpackChunksmart_data_lake||[]).push([[6687],{8717:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>d,toc:()=>u});var n=a(5893),r=a(1151),i=a(4866),o=a(5162);const s={title:"Keeping historical data"},l=void 0,d={id:"getting-started/part-2/historical-data",title:"Keeping historical data",description:"Goal",source:"@site/docs/getting-started/part-2/historical-data.md",sourceDirName:"getting-started/part-2",slug:"/getting-started/part-2/historical-data",permalink:"/docs/getting-started/part-2/historical-data",draft:!1,unlisted:!1,editUrl:"https://github.com/smart-data-lake/smart-data-lake/tree/documentation/docs/getting-started/part-2/historical-data.md",tags:[],version:"current",frontMatter:{title:"Keeping historical data"},sidebar:"tutorialSidebar",previous:{title:"Delta Lake - a better data format",permalink:"/docs/getting-started/part-2/delta-lake-format"},next:{title:"Custom Webservice",permalink:"/docs/getting-started/part-3/custom-webservice"}},c={},u=[{value:"Goal",id:"goal",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Historization of airport data",id:"historization-of-airport-data",level:2},{value:"Deduplication of flight data",id:"deduplication-of-flight-data",level:2},{value:"Summary",id:"summary",level:2}];function h(e){const t={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"goal",children:"Goal"}),"\n",(0,n.jsx)(t.p,{children:"Data generally can be split into two groups:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Master data:",(0,n.jsx)(t.br,{}),"\n","data about objects that evolve over time, e.g. an airport, a person, a product..."]}),"\n",(0,n.jsxs)(t.li,{children:["Transactional data:",(0,n.jsx)(t.br,{}),"\n","data about events that took place at a certain point in time, e.g. a flight, a payment..."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"To keep historical data for both these categories, different strategies are applied:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Master data"})," is most often ",(0,n.jsx)(t.strong,{children:"historized"}),' - this means tracking the evolution of objects over time by introducing a time dimension.\nUsually this is modelled with two additional attributes "valid_from" and "valid_to", where "valid_from" is an additional primary key column.']}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Transactional data"})," is usually ",(0,n.jsx)(t.strong,{children:"deduplicated"}),", as only the latest state of a specific event is of interest. If an update for an event occurs, the previous information is discarded (or consolidated in special cases).\nAdditional care must be taken to keep all historical events, even if they are no longer present in the source system. Often specific housekeeping rules are applied (e.g. retention period), either for legal or cost saving reasons."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"requirements",children:"Requirements"}),"\n",(0,n.jsx)(t.p,{children:"For Historization and Deduplication a data pipeline needs to read the state of the output DataObject, merge it with the new state of the input DataObject and write the result to the output DataObject.\nTo read and write the same DataObject in the same SDL Action, this must be a transactional DataObject.\nIt means the DataObject must implement the interface TransactionalSparkTableDataObject of SDL.\nLuckily in the previous chapter we already upgraded our data pipeline to use DeltaLakeTableDataObject, which is a TransactionalSparkTableDataObject."}),"\n",(0,n.jsx)(t.p,{children:"Further, we need a key to identify records for a specific object in our data, so we can build the time dimension or deduplicate records of the same object:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["For airport masterdata (",(0,n.jsx)(t.code,{children:"int_airports"}),') the attribute "ident" clearly serves this purpose.']}),"\n",(0,n.jsxs)(t.li,{children:["For departure data (",(0,n.jsx)(t.code,{children:"int_departures"}),") it gets more complicated to identify a flight. To simplify, let's assume we're only interested in one flight per aircraft, departure airport and day.\nThe key would then be the attributes ",(0,n.jsx)(t.code,{children:"icao24"}),", ",(0,n.jsx)(t.code,{children:"estdepartureairport"})," and ",(0,n.jsx)(t.code,{children:"trunc_date"}),"."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"historization-of-airport-data",children:"Historization of airport data"}),"\n",(0,n.jsx)(t.p,{children:"To historize airport master data, we have to adapt our configuration as follows:"}),"\n",(0,n.jsxs)(t.p,{children:["Add a primary key to the table definition of ",(0,n.jsx)(t.code,{children:"int-airports"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'  table {\n    db = "default"\n    name = "int_airports"\n    primaryKey = [ident]\n  }\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Note, that a primary key can be a composite primary key, therefore you need to define an array of columns ",(0,n.jsx)(t.code,{children:"[ident]"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["For the action ",(0,n.jsx)(t.code,{children:"select-airport-cols"}),", change it's type from ",(0,n.jsx)(t.code,{children:"CopyAction"})," to ",(0,n.jsx)(t.code,{children:"HistorizeAction"}),".",(0,n.jsx)(t.br,{}),"\n","While you're at it, rename it to ",(0,n.jsx)(t.code,{children:"historize-airports"})," to reflect it's new function."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"  historize-airports {\n    type = HistorizeAction\n    ...\n  }\n"})}),"\n",(0,n.jsxs)(t.p,{children:["With historization, this table will now get two additional columns called ",(0,n.jsx)(t.code,{children:"dl_ts_captured"})," and ",(0,n.jsx)(t.code,{children:"dl_ts_delimited"}),".\nSchema evolution of existing tables will be explained later, so for now, just delete the table and it's data for the DataObject ",(0,n.jsx)(t.code,{children:"int-airports"})," through Polynote.\nTo access DataObjects from Polynote you need to first read SDL configuration into a registry, see Notebook ",(0,n.jsx)(t.em,{children:"SelectingData"})," chapter ",(0,n.jsx)(t.em,{children:"Select data by using DataObjects configured in SmartDataLake"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'  val dataIntAirports = registry.get[DeltaLakeTableDataObject]("int-airports")\n  dataIntAirports.dropTable\n'})}),"\n",(0,n.jsx)(t.admonition,{type:"caution",children:(0,n.jsx)(t.p,{children:"Depending on your system setup, it's possible that Polynote is not allowed to drop the data of your table.\nIf you receive strange errors about dl_ts_captured and dl_ts_delimited not being found, please delete the folder data/int-airports/ manually."})}),"\n",(0,n.jsxs)(t.p,{children:["Then start Action ",(0,n.jsx)(t.code,{children:"historize-airports"}),".\nYou may have seen that the ",(0,n.jsx)(t.code,{children:"--feed-sel"})," parameter of SDL command line supports more options to select actions to execute (see command line help).\nWe will now only execute this single action by changing this parameter to ",(0,n.jsx)(t.code,{children:"--feed-sel ids:historize-airports"}),":"]}),"\n",(0,n.jsxs)(i.Z,{groupId:"docker-podman-switch",defaultValue:"docker",values:[{label:"Docker",value:"docker"},{label:"Podman",value:"podman"}],children:[(0,n.jsx)(o.Z,{value:"docker",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-jsx",children:"docker run --rm -v ${PWD}/data:/mnt/data -v ${PWD}/target:/mnt/lib -v ${PWD}/config:/mnt/config --network getting-started_default sdl-spark:latest -c /mnt/config --feed-sel ids:historize-airports\n"})})}),(0,n.jsx)(o.Z,{value:"podman",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-jsx",children:"podman run --hostname=localhost --rm -v ${PWD}/data:/mnt/data -v ${PWD}/target:/mnt/lib -v ${PWD}/config:/mnt/config --pod getting-started sdl-spark:latest -c /mnt/config --feed-sel ids:historize-airports\n"})})})]}),"\n",(0,n.jsxs)(t.p,{children:["After successful execution you can check the schema and data of our table in Polynote.\nIt now has a time dimension through the two new columns ",(0,n.jsx)(t.code,{children:"dl_ts_captured"})," and ",(0,n.jsx)(t.code,{children:"dl_ts_delimited"}),".\nThey form a closed interval, meaning start and end time are inclusive.\nIt has millisecond precision, but the timestamp value is set to the current time of our data pipeline run.\nThe two attributes show the time period in which an object with this combination of attribute values has existed in our data source.\nThe sampling rate is given by the frequency that our data pipeline is scheduled."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"  dataIntAirports.getSparkDataFrame().printSchema\n"})}),"\n",(0,n.jsx)(t.p,{children:"Output:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"  root\n  |-- ident: string (nullable = true)\n  |-- name: string (nullable = true)\n  |-- latitude_deg: string (nullable = true)\n  |-- longitude_deg: string (nullable = true)\n  |-- dl_ts_captured: timestamp (nullable = true)\n  |-- dl_ts_delimited: timestamp (nullable = true)\n"})}),"\n",(0,n.jsx)(t.p,{children:"If you look at the data, there should be only one record per object for now, as we didn't run our data pipeline with historical data yet."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'  dataIntAirports.getSparkDataFrame().orderBy($"ident",$"dl_ts_captured").show\n\n  +-----+--------------------+------------------+-------------------+--------------------+-------------------+\n  |ident|                name|      latitude_deg|      longitude_deg|      dl_ts_captured|    dl_ts_delimited|\n  +-----+--------------------+------------------+-------------------+--------------------+-------------------+\n  |  00A|   Total Rf Heliport|    40.07080078125| -74.93360137939453|2021-12-05 13:23:...|9999-12-31 00:00:00|\n  | 00AA|Aero B Ranch Airport|         38.704022|        -101.473911|2021-12-05 13:23:...|9999-12-31 00:00:00|\n  | 00AK|        Lowell Field|         59.947733|        -151.692524|2021-12-05 13:23:...|9999-12-31 00:00:00|\n  | 00AL|        Epps Airpark| 34.86479949951172| -86.77030181884766|2021-12-05 13:23:...|9999-12-31 00:00:00|\n  | 00AR|Newport Hospital ...|           35.6087|         -91.254898|2021-12-05 13:23:...|9999-12-31 00:00:00|\n  ...\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Let's try to simulate the historization process by loading a historical state of the data and see if any of the airports have changed since then.\nFor this, drop table ",(0,n.jsx)(t.code,{children:"int-airports"})," again.\nThen, delete all files in ",(0,n.jsx)(t.code,{children:"data/stg-airport"})," and copy the historical ",(0,n.jsx)(t.code,{children:"result.csv"})," from the folder ",(0,n.jsx)(t.code,{children:"data-fallback-download/stg-airport"})," into the folder ",(0,n.jsx)(t.code,{children:"data/stg-aiport"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["Now start the action ",(0,n.jsx)(t.code,{children:"historize-airports"}),' (and only historize-airports) again to do an "initial load".\nRemember how you do that? That\'s right, you can define a single action with ',(0,n.jsx)(t.code,{children:"--feed-sel ids:historize-airports"}),".",(0,n.jsx)(t.br,{}),"\n","Afterwards, start actions ",(0,n.jsx)(t.code,{children:"download-airports"})," and ",(0,n.jsx)(t.code,{children:"historize-airports"})," by using the parameter ",(0,n.jsx)(t.code,{children:"--feed-sel 'ids:(download|historize)-airports'"})," to download fresh data and build up the airport history."]}),"\n",(0,n.jsx)(t.p,{children:"Now check in Polynote again and you'll find several airports that have changed between the intitial and the current state:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'  dataIntAirports.getSparkDataFrame()\n  .groupBy($"ident").count\n  .orderBy($"count".desc)\n  .show\n\n  +-------+-----+\n  |  ident|count|\n  +-------+-----+\n  |RU-4111|    2|\n  |   LL33|    2|\n  |   73CA|    2|\n  |CA-0120|    2|\n  |   CDV3|    2|\n  ...\n'})}),"\n",(0,n.jsx)(t.p,{children:"When checking the details it seems that for many airports the number of significant digits was reduced for the position:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'  dataIntAirports.getSparkDataFrame()\n  .where($"ident"==="CDV3")\n  .show(false)\n  \n  +-----+-------------------------------------------------+-------------+--------------+--------------------------+--------------------------+\n  |ident|name                                             |latitude_deg |longitude_deg |dl_ts_captured            |dl_ts_delimited           |\n  +-----+-------------------------------------------------+-------------+--------------+--------------------------+--------------------------+\n  |CDV3 |Charlottetown (Queen Elizabeth Hospital) Heliport|46.255493    |-63.098887    |2021-12-05 20:52:58.800645|9999-12-31 00:00:00       |\n  |CDV3 |Charlottetown (Queen Elizabeth Hospital) Heliport|46.2554925916|-63.0988866091|2021-12-05 20:40:31.629764|2021-12-05 20:52:58.799645|\n  +-----+-------------------------------------------------+-------------+--------------+--------------------------+--------------------------+\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Values for ",(0,n.jsx)(t.code,{children:"dl_ts_capture"})," and ",(0,n.jsx)(t.code,{children:"dl_ts_delimited"})," respectively were set to the current time of our data pipeline run.\nFor an initial load, this should be set to the time of the historical data set.\nCurrently, this is not possible in SDL, but there are plans to implement this, see issue ",(0,n.jsx)(t.a,{href:"https://github.com/smart-data-lake/smart-data-lake/issues/427",children:"#427"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"Now let's continue with flight data."}),"\n",(0,n.jsxs)(t.admonition,{title:"Spark performance",type:"tip",children:[(0,n.jsxs)(t.p,{children:["Maybe you're under the impression that HistorizeAction runs quite long for a small amount of data.\nAnd you're right about that:",(0,n.jsx)(t.br,{}),"\n","On one side this is because in the background, it joins all existing data with the new input data and checks for changes.",(0,n.jsx)(t.br,{}),"\n","On the other side there is a Spark property we should tune for small datasets.\nIf Spark joins data, it needs two processing stages and a shuffle in between to do so (you can read more about this in various Spark tutorials).\nThe default value is to create 200 tasks in each shuffle. With our dataset, 2 tasks would be enough already.\nYou can tune this by setting the following property in global.spark-options of your application.conf:"]}),(0,n.jsx)(t.p,{children:'"spark.sql.shuffle.partitions" = 2'}),(0,n.jsx)(t.p,{children:"Also, the algorithm to detect and merge changes can be optimized by using Delta formats merge capabilities. This will be covered in part three of this tutorial."})]}),"\n",(0,n.jsx)(t.h2,{id:"deduplication-of-flight-data",children:"Deduplication of flight data"}),"\n",(0,n.jsx)(t.p,{children:"To deduplicate departure flight data, we have to adapt our configuration as follows:"}),"\n",(0,n.jsxs)(t.p,{children:["Add a primary key to the table definition of ",(0,n.jsx)(t.code,{children:"int-departures"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'  table {\n    db = "default"\n    name = "int_departures"\n    primaryKey = [icao24, estdepartureairport, dt]\n  }\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Change the type of action ",(0,n.jsx)(t.code,{children:"prepare-departures"})," from ",(0,n.jsx)(t.code,{children:"CopyAction"}),", this time to ",(0,n.jsx)(t.code,{children:"DeduplicateAction"})," and rename it to ",(0,n.jsx)(t.code,{children:"deduplicate-departures"}),", again to reflect its new type.\nIt also needs an additional transformer to calculate the new primary key column ",(0,n.jsx)(t.code,{children:"dt"})," derived from the column ",(0,n.jsx)(t.code,{children:"firstseen"}),".\nSo make sure to add these lines too:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"  deduplicate-departures {\n    type = DeduplicateAction\n    ...\n    transformers = [{\n      type = SQLDfTransformer\n      code = \"select stg_departures.*, date_format(from_unixtime(firstseen),'yyyyMMdd') dt from stg_departures\"\n    }]\n    ...\n  }\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Now, delete the table and data of the DataObject ",(0,n.jsx)(t.code,{children:"int-departures"})," in Polynote, to prepare it for the new columns ",(0,n.jsx)(t.code,{children:"dt"})," and ",(0,n.jsx)(t.code,{children:"dl_ts_captured"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'  val dataIntDepartures = registry.get[DeltaLakeTableDataObject]("int-departures")\n  dataIntDepartures.dropTable\n'})}),"\n",(0,n.jsx)(t.p,{children:"Then start Action deduplicate-departures:"}),"\n",(0,n.jsxs)(i.Z,{groupId:"docker-podman-switch",defaultValue:"docker",values:[{label:"Docker",value:"docker"},{label:"Podman",value:"podman"}],children:[(0,n.jsx)(o.Z,{value:"docker",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-jsx",children:"docker run --rm -v ${PWD}/data:/mnt/data -v ${PWD}/target:/mnt/lib -v ${PWD}/config:/mnt/config --network getting-started_default sdl-spark:latest -c /mnt/config --feed-sel ids:deduplicate-departures\n"})})}),(0,n.jsx)(o.Z,{value:"podman",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-jsx",children:"podman run --rm --hostname=localhost -v ${PWD}/data:/mnt/data -v ${PWD}/target:/mnt/lib -v ${PWD}/config:/mnt/config --pod getting-started sdl-spark:latest -c /mnt/config --feed-sel ids:deduplicate-departures\n"})})})]}),"\n",(0,n.jsxs)(t.p,{children:["After successful execution you can check the schema and data of our table in Polynote.\nThe new column ",(0,n.jsx)(t.code,{children:"dl_ts_captured"})," shows the current time of the data pipeline run when this object first occurred in the input data."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"  dataIntDepartures.getSparkDataFrame().printSchema\n\n  root\n  |-- arrivalairportcandidatescount: long (nullable = true)\n  |-- callsign: string (nullable = true)\n  |-- departureairportcandidatescount: long (nullable = true)\n  |-- estarrivalairport: string (nullable = true)\n  |-- estarrivalairporthorizdistance: long (nullable = true)\n  |-- estarrivalairportvertdistance: long (nullable = true)\n  |-- estdepartureairport: string (nullable = true)\n  |-- estdepartureairporthorizdistance: long (nullable = true)\n  |-- estdepartureairportvertdistance: long (nullable = true)\n  |-- firstseen: long (nullable = true)\n  |-- icao24: string (nullable = true)\n  |-- lastseen: long (nullable = true)\n  |-- dt: string (nullable = true)\n  |-- dl_ts_captured: timestamp (nullable = true)\n"})}),"\n",(0,n.jsx)(t.p,{children:"We can check the work of DeduplicateAction by the following query in Polynote:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'  dataIntDepartures.getSparkDataFrame()\n  .groupBy($"icao24", $"estdepartureairport", $"dt")\n  .count\n  .orderBy($"count".desc)\n  .show\n\n  +------+-------------------+--------+-----+\n  |icao24|estdepartureairport|      dt|count|\n  +------+-------------------+--------+-----+\n  |4b43ab|               LSZB|20210829|    3|\n  |4b4b8d|               LSZB|20210829|    3|\n  |4b1b13|               LSZB|20210829|    2|\n  |4b4445|               LSZB|20210829|    2|\n  |4b0f70|               LSZB|20210830|    1|\n  |4b1a01|               LSZB|20210829|    1|\n  |346603|               LSZB|20210829|    1|\n  |4b4442|               LSZB|20210829|    1|\n  |4d02d7|               LSZB|20210829|    1|\n  |4b43ab|               LSZB|20210830|    1|\n  ...\n'})}),"\n",(0,n.jsx)(t.p,{children:"... and it seems that it did not work properly! There are 2 or even 3 records for the same primary key!\nEven worse, we just deleted this table before, so DeduplicateAction shouldn't have any work to do at all."}),"\n",(0,n.jsxs)(t.p,{children:["In fact DeduplicateAction assumes that input data is already unique for the given primary key.\nThis would be the case for example, in a messaging context, if you were to receive the same message twice.\nDeduplicateAction doesn't deduplicate your input data again, because deduplication is costly and data often is already unique.\nBut in our example we have duplicates in the input data set, and we need to add some deduplication logic to our input data (this will probably become a configuration flag in future SDL version, see issue ",(0,n.jsx)(t.a,{href:"https://github.com/smart-data-lake/smart-data-lake/issues/428",children:"#428"}),")."]}),"\n",(0,n.jsx)(t.p,{children:"As the easiest way to do this is by using the Scala Spark API, we will add a second ScalaCodeSparkDfTransformer as follows (make sure you get the brackets right):"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'  deduplicate-departures {\n    type = DeduplicateAction\n    ...\n    transformers = [{\n      type = SQLDfTransformer\n      code = "select stg_departures.*, date_format(from_unixtime(firstseen),\'yyyyMMdd\') dt from stg_departures"\n    },{\n      type = ScalaCodeSparkDfTransformer\n      code = """\n        import org.apache.spark.sql.{DataFrame, SparkSession}\n        def transform(session: SparkSession, options: Map[String,String], df: DataFrame, dataObjectId: String) : DataFrame = {\n          import session.implicits._\n          df.dropDuplicates("icao24", "estdepartureairport", "dt")\n        }\n        // return as function\n        transform _\n      """\n    }]\n    ...\n  }\n'})}),"\n",(0,n.jsxs)(t.p,{children:["If you run Action ",(0,n.jsx)(t.code,{children:"deduplicate-departures"})," again and check the result in Polynote, everything is fine now."]}),"\n",(0,n.jsx)(t.admonition,{type:"info",children:(0,n.jsxs)(t.p,{children:["Note how we have used a third way of defining transformation logic now:",(0,n.jsx)(t.br,{}),"\n","In part 1 we first used a SQLDfsTransformer writing SQL code.",(0,n.jsx)(t.br,{}),"\n","Then for the more complex example of computing distances, we used a  ScalaClassSparkDfTransformer pointing to a Scala class.",(0,n.jsx)(t.br,{}),"\n","Here, we simply include Scala code in our configuration file directly."]})}),"\n",(0,n.jsxs)(t.p,{children:["For sure DeduplicateAction did not have much work to do, as this was the first data load.\nIn order to get different data you would need to adjust the unix timestamp parameters in the URL of DataObject ",(0,n.jsx)(t.code,{children:"ext-departures"}),".\nFeel free to play around."]}),"\n",(0,n.jsxs)(t.admonition,{title:"Scala Code",type:"info",children:[(0,n.jsx)(t.p,{children:"Scala is a compiled language. The compiler creates bytecode which can be run on a JVM.\nNormally compilation takes place before execution. So how does it work with scala code in the configuration as in our deduplication logic above?"}),(0,n.jsx)(t.p,{children:"With Scala, you can compile code on the fly. This is actually what the Scala Shell/REPL is doing as well.\nThe Scala code in the configuration above gets compiled when ScalaCodeSparkDfTransformer is instantiated during startup of SDL."})]}),"\n",(0,n.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,n.jsx)(t.p,{children:"You have now seen different parts of industrializing a data pipeline like robust data formats and caring about historical data.\nFurther, you have explored data interactively with a notebook."}),"\n",(0,n.jsxs)(t.p,{children:["The final configuration file of Part 2 should look like ",(0,n.jsx)(t.a,{target:"_blank",href:a(9140).Z+"",children:"this"})]}),"\n",(0,n.jsx)(t.p,{children:"In part 3 we will see how to incrementally load fresh flight data and optimize deduplication and historization.\nSee you!"})]})}function p(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},5162:(e,t,a)=>{a.d(t,{Z:()=>o});a(7294);var n=a(6010);const r={tabItem:"tabItem_Ymn6"};var i=a(5893);function o(e){let{children:t,hidden:a,className:o}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,n.Z)(r.tabItem,o),hidden:a,children:t})}},4866:(e,t,a)=>{a.d(t,{Z:()=>v});var n=a(7294),r=a(6010),i=a(2466),o=a(6550),s=a(469),l=a(1980),d=a(7392),c=a(12);function u(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:a}=e;return(0,n.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}(a);return function(e){const t=(0,d.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function p(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:a}=e;const r=(0,o.k6)(),i=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,l._X)(i),(0,n.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(r.location.search);t.set(i,e),r.replace({...r.location,search:t.toString()})}),[i,r])]}function f(e){const{defaultValue:t,queryString:a=!1,groupId:r}=e,i=h(e),[o,l]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:i}))),[d,u]=m({queryString:a,groupId:r}),[f,g]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,i]=(0,c.Nk)(a);return[r,(0,n.useCallback)((e=>{a&&i.set(e)}),[a,i])]}({groupId:r}),b=(()=>{const e=d??f;return p({value:e,tabValues:i})?e:null})();(0,s.Z)((()=>{b&&l(b)}),[b]);return{selectedValue:o,selectValue:(0,n.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)}),[u,g,i]),tabValues:i}}var g=a(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=a(5893);function x(e){let{className:t,block:a,selectedValue:n,selectValue:o,tabValues:s}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),c=e=>{const t=e.currentTarget,a=l.indexOf(t),r=s[a].value;r!==n&&(d(t),o(r))},u=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const a=l.indexOf(e.currentTarget)+1;t=l[a]??l[0];break}case"ArrowLeft":{const a=l.indexOf(e.currentTarget)-1;t=l[a]??l[l.length-1];break}}t?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},t),children:s.map((e=>{let{value:t,label:a,attributes:i}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:n===t?0:-1,"aria-selected":n===t,ref:e=>l.push(e),onKeyDown:u,onClick:c,...i,className:(0,r.Z)("tabs__item",b.tabItem,i?.className,{"tabs__item--active":n===t}),children:a??t},t)}))})}function y(e){let{lazy:t,children:a,selectedValue:r}=e;const i=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===r));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:i.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==r})))})}function w(e){const t=f(e);return(0,j.jsxs)("div",{className:(0,r.Z)("tabs-container",b.tabList),children:[(0,j.jsx)(x,{...e,...t}),(0,j.jsx)(y,{...e,...t})]})}function v(e){const t=(0,g.Z)();return(0,j.jsx)(w,{...e,children:u(e.children)},String(t))}},9140:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/application-part2-historical-7a2ca88bc6104da84d43497b32a9718a.conf"},1151:(e,t,a)=>{a.d(t,{Z:()=>s,a:()=>o});var n=a(7294);const r={},i=n.createContext(r);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);