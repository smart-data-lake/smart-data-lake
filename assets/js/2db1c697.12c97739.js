"use strict";(self.webpackChunksmart_data_lake=self.webpackChunksmart_data_lake||[]).push([[1677],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>b});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),s=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=s(a),m=r,b=p["".concat(c,".").concat(m)]||p[m]||u[m]||o;return a?n.createElement(b,l(l({ref:t},d),{},{components:a})):n.createElement(b,l({ref:t},d))}));function b(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1795:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const o={id:"dataObjects",title:"Data Objects"},l=void 0,i={unversionedId:"reference/dataObjects",id:"reference/dataObjects",title:"Data Objects",description:"DataObjects are the core element of Smart data Lake Builder. These objects define data entities and how they can be accessed by properties including location, type and others.",source:"@site/docs/reference/dataObjects.md",sourceDirName:"reference",slug:"/reference/dataObjects",permalink:"/docs/reference/dataObjects",draft:!1,editUrl:"https://github.com/smart-data-lake/smart-data-lake/tree/documentation/docs/reference/dataObjects.md",tags:[],version:"current",frontMatter:{id:"dataObjects",title:"Data Objects"},sidebar:"docs",previous:{title:"Command Line",permalink:"/docs/reference/commandLine"},next:{title:"Actions",permalink:"/docs/reference/actions"}},c={},s=[{value:"Object Types",id:"object-types",level:2},{value:"Schema",id:"schema",level:2}],d={toc:s},p="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"DataObjects are the core element of Smart data Lake Builder. These objects define data entities and how they can be accessed by properties including location, type and others."),(0,r.kt)("p",null,"Furthermore, a section with metadata can be used. "),(0,r.kt)("p",null,"All available DataObjects and their parameters are listed in the ",(0,r.kt)("a",{parentName:"p",href:"http://smartdatalake.ch/json-schema-viewer/index.html"},"Schema Viewer"),"."),(0,r.kt)("h2",{id:"object-types"},"Object Types"),(0,r.kt)("p",null,"Smart Data Lake Builder supports beside a list of file types also database objects and general connectors. "),(0,r.kt)("p",null,"Examples: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"file based: CSV, JSON, XML, Parquet, ..."),(0,r.kt)("li",{parentName:"ul"},"database based: JDBC, DeltaLake, Hive ..."),(0,r.kt)("li",{parentName:"ul"},"connectors: Airbyte, sFTP, Webservice, ...")),(0,r.kt)("p",null,"If necessary, additional formats can be implemented by providing an own DataObject implementation (Java/Scala), or implementing an Airbyte connector (Python)."),(0,r.kt)("h2",{id:"schema"},"Schema"),(0,r.kt)("p",null,"SDLB requires a schema for data object that can create DataFrames, if they are used as starting point of a DAG. The schema can be"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"specified manually with an option in the dataObject"),(0,r.kt)("li",{parentName:"ul"},"specified by adding a sample file or"),(0,r.kt)("li",{parentName:"ul"},"inferred from data (sampling).\nThe latter enables fast development, but should be avoided in production.\nBy default SDLB will verify that new data fits the existing schema, otherwise an error will be thrown. If desired schema evolution can be enabled using ",(0,r.kt)("strong",{parentName:"li"},"allowSchemaEvolution")," on several DataObjects, e.g. JdbcTableDataObject and DeltaLakeTableObject. Then, old rows will get null in new columns and new rows get null in old (not existing anymore) columns. ")),(0,r.kt)("p",null,"See also details in ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/schema"},"Schema")))}u.isMDXComponent=!0}}]);